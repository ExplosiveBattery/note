shell的开头用#!/bin/bash而不是#!/bin/shell（虽然可能有时候没给你报错gedit的时候还可能带有变色），kali的shell实际上是在/usr/bin/gnome-shell。执行脚本的时候其实相当于重新开了个进程bash，所以语句...变量...是这样
``反引号等价于$(..)
$[...]用于计算内部s表达式，上面两种则不能用于计算，还有$((xxx))能用于运算
当shell碰到第一个单引号时，它忽略掉其后直到右引号的所有特殊字符。即单引号一定表示字符串常量。

Bash 的变量可以声明为数组和整数数字。注意数字类型没有浮点数。如果不进行声明，默认是字符串类型。变量的声明使用 declare 命令：
$ declare [-aixr] variable
-a ： 定义为数组类型
-i ： 定义为整数类型
-x ： 定义为环境变量
-r ： 定义为 readonly 类型

$i1 <=> ${i1} 后者在想要直接在变量后面加上字符串的时候有用到

{1..10} 1-10的数组
使用 [ ] 来对数组进行索引操作：
$ array[1]=a
$ array[2]=b
$ echo ${array[1]}
列表：https://www.cnblogs.com/chuanzhang053/p/8532680.html 
mongo_url='10.16.56.15:17031
10.16.56.14:17031
10.16.56.16:17031
10.21.46.84:17031
10.21.46.86:17031
10.21.46.81:17031
10.21.46.83:17031'
for i in $mongo_url;do
        echo $i
done
part_mongo_url=($part_mongo_url)
part_db=news_article_category_push_mongo_db_200_
collection=device_info
read -p "请输入task_id" task_id
read -p "请输入查询的天数day" day

length=$[200/${#part_mongo_url[@]}]
for i in `seq 0 ${#part_mongo_url[@]}`;do #seq 默认从1开始
        echo ${part_mongo_url[i]} #注意数组索引前面不需要$
done
利用@或*，可以将数组扩展成列表，然后使用#来获取数组元素的个数，格式如下：
${#array_name[@]}
${#array_name[*]}
字符串长度：${#string_name}

IFS变量控制的是默认切分符号，默认是 space, tab, newline
a="one,two,three,four"
OLD_IFS="$IFS" 
IFS="," 
arr=($a) 
IFS="$OLD_IFS" 
for s in ${arr[@]} 
do 
    echo "$s" 
done



除了能够使用$数字 获取传递给脚本的参数，还可以在运行中通过read命令获取用户输入：
read -t 30 -n 1 -p "请输入用户名称:" name  获取键盘输入给name变量（如果没有就会创建这个变量），限定输入为一个字符

#!/bin/bash
for i in seq 9  #seq 9 表示[1,9]  seq 9 10 表示[9,10]
do
	echo $i
done
#输出：
seq
9

#!/bin/bash
#9*9乘法表
for m in `seq 9` #注意这里不是单引号，而是反引号，单引号是字符串
do
 for n in `seq $m`
 do
  echo -n "$m*$n="$(($m*$n))" "#-n是避免echo自带的换行用的 #$后面必须是两层小括号，里面那层是为了表明这是个表达式而不是个命令
 done
 echo #换行
done
#$((算术表达式)) 或者 $[算术表达式]
#`expr $m \* $n`也可以，注意\*两边的空格，否则会被视为字符串。$(expr $m \* $n)也是可以的


#!/bin/bash
#在桌面上有存放了ip，port的文本文件，我们要用shell进行扫描，文件格式是
#192.168.1.1
#22
#
#162.114.114.144
#23
#
#...
# wc - print newline, word, and byte counts for each file
text=`cat /root/Desktop/b` #A kongge
for str in $text #由此过滤空白字符
do
	length=`echo $str | wc -L` #注释前面一定要有空格，不然就不会被认为是注释
	if [ $length -gt 6 ];  then #[]里面左右两侧一定要有空格 如果没有;那么then是要换行的
# if后面的计算表达式前面不需要$
		ip=$str
	else
		port=$str
		nmap -p$port -sV $ip|grep -v Starting|grep -v Host|grep -v PORT #管道后面的命令是为了去除掉几个行
	fi
done



#!/bin/bash
#每次开机都需要的电源保护，降低硬盘转速来省电
currentMode=$(cat /proc/sys/vm/laptop_mode)
if[ $currentMode -eq 0 ]
then
echo "5" > /proc/sys/vm/laptop_mode
echo "Laptop Mode Enabled"
else
echo "0" > /proc/sys/vm/laptop_mode
echo "Laptop Mode Disabled"
fi



arping的升级功能脚本：
对255.255.255.0  IP/24为子网掩码的网段进行arp存货查询
#!/bin/bash
if[ "$#" -ne 1 ];then	# $#表示在终端中的命令有几个部分，即C语言中的argc，用不用双引号括起来都一样。$n 这个程式的第n个参数值
	echo "Usage xxxxx"
	ehco "xxxx"
	exit
fi

interface=$1  $1表示输入的第一个参数
prefix=$(ifconfig $interface | grep "inet " | cut -d " " -f 2 | cut -d "." -f 1-3)
for addr in $(seq 1 254);do
	arping -c 1 $prefix.$addr | grep "ARPING" | cut -d " " -f 2 > /root/Desktop/arp.txt
done
#root@kali:~/Desktop# echo 192.168.2.1 | cut -d '.' -f 1-3
#输出192.168.2



#!/bin/bash

nmap -iL add.txt -p- --open >> scan.result  ###add.txt要扫描的地址范围

cat scan.result | grep -v ^Host | grep -v Not | grep -v PORT | cut -d / -f1 | cut -d "(" -f2 | cut -d ")" -f1 | cut -d " " -f5 > ip.port

while read line

    do

        [[ -z $line ]] && continue

        n=`echo $line | wc -L`

        echo $n

        if [ $n -gt 6 ]; then

            ip=$line

        else

            port=$line

            nmap -p$port -sV $ip | grep -v Starting | grep -v Host | grep -v PORT | grep -v Service | grep -v "done"  >> services

        fi

    done 
###-z代表的是该变量是否有值。
###-d代表的是判断制定的是否是一个目录！





#!/bin/sh
folder="/var/www/"
file="/var/www/log"
 
# -x 参数判断 $folder 是否存在并且是否具有可执行权限
if [ ! -x "$folder"]; then
 mkdir "$folder"
fi
 
# -d 参数判断 $folder 是否存在
if [ ! -d "$folder"]; then
 mkdir "$folder"
fi
 
# -f 参数判断 $file 是否存在
if [ ! -f "$file" ]; then
 touch "$file"
fi
 
# -n 判断一个变量是否有值
if [ ! -n "$var" ]; then
 echo "$var is empty"
 exit 0
fi
 
# 判断两个变量是否相等
if [ "$var1" = "$var2" ]; then
 echo '$var1 eq $var2'
else
 echo '$var1 not eq $var2'
fi

-e和-f的区别是，-f代表常规文件（regular file），-e代表所有任何类型文件
参考如下：
-e filename 如果 filename存在，则为真
-d filename 如果 filename为目录，则为真 
-f filename 如果 filename为常规文件，则为真
-L filename 如果 filename为符号链接，则为真。不能用于管道
-r filename 如果 filename可读，则为真 
-w filename 如果 filename可写，则为真 
-x filename 如果 filename可执行，则为真
-s filename 如果文件长度不为0，则为真
-h filename 如果文件是软链接，则为真


#/bin/bash
if [ ! -e "/tmp/fifoGst" ];then
	mkfifo /tmp/fifoGst
fi

if [ ! -e /tmp/fifoFfmpeg ];then
	mkfifo /tmp/fifoFfmpeg
fi
echo 123 | tee /tmp/fifoGst > /tmp/fifoFfmpeg



#!/bin/bash
while [ true ]
do
	echo -n 1
	sleep 3 #是bash被sleep而不是进程，所以输出到bush上的东西，使用popen和fread就会读取不到。

done


#!/bin/sh
dir=/home/luozhigang
file=$dir/file #等号左边右边都不能有空格

if [ -e $dir ];then
        rm -rf $dir
fi
mkdir $dir
touch $file
ln $file $dir/fileHard
ln -s $file $dir/fileSoft
ls -l $dir
rm -rf $dir



#$?返回0表示程序正常执行了，如果[ -e xxx ]对一个不存在的文件检测那么程序就会return 1，表示不正常执行。而这个和在if中利用的值相反。
if [ -e /home/battery/a ];then
	echo 1
	echo $? #output is zero
else
	echo 2
fi




撰写一支程序，他的作用是: 1.) 先查看一下 /root/test/logical 这个名称是否存在； 2.) 若不存在，则建立一个档案，使用 touch 来建立，建立完成后离开； 3.) 如果存在的话，判断该名称是否为档案，若为档案则将之初除后建立一个目录，文件名为 logical ，之后离开； 4.) 如果存在的话，而且该名称为目录，则移除此目录！
#!/bin/sh

directory=/root/test

file=$directory/logical




#判断并处理/root/test是否存在的问题

if [ ! -d $directory ];then #“”严格的if写在前面
      	if [ -e $directory ];then

		rm -f $directory

	fi
	mkdir $directory
fi



#判断并处理/root/test/logical是否存在的问题

if [ -e $file ];then

	if [ ! -d $file ];then

		rm -f $file

		mkdir $file

	else

		rm -rf $file

	fi

else

	touch $file


fi	

$RANDOM %254


死循环要用：
while true 而不是while 1
for((i=0;i<10;))   这种格式for循环里面的变量不带$
for i in  {1..10};do  echo $i; done
for i in  {1..10,2};do  echo $i; done 只会输出两行

将指定文件夹中的文件从指定日期按照20180501.jpg开始命名
#/bin/sh
PATH=/media/vega/0D6C051A0D6C051A/all/Wallpapers
dateStringPrefix="20180501 +"
num=0
dateStringPostfix=" day"

for i in $(echo $PATH/*); do 
	newFileName = ${PATH}/$(/bin/date -d "${dateStringPrefix}${num}${dateStringPostfix}" +%Y%m%d).jpg
	/bin/mv $i $newFileName
done


#产生这样的日志格式表示某一个用户对App的使用情况记录 {"userId":2000,"day":"2017-03-01","begintime":1488326400000,"endtime":1488327000000,"data":[{"package":"com.browser1","activetime":480000},{"package":"com.browser","activetime":120000}]}

#!/bin/bash
# 为了方便看到效果，一切相关数字都设置的很小
logNumOfOneDay=20 #设置每日上限用于跟换日期
dayAdd=0
userSum=3 #用户总数
packageSum=5  #应用总数
secondSum=$[24*3600] #秒总数
host=127.0.0.1
port=8888

while true; do
	for((i1=0;i1<$logNumOfOneDay;++i1)); do
		beginSecond=$[$RANDOM % $secondSum]
		activetime=$[$RANDOM % (($secondSum-$beginSecond) % 10800)] #认为一次不会超过3小时
		endSecond=$[$beginSecond + $activetime]
		echo {\
			\"userId\":$[$RANDOM % $userSum],\
			\"day\":\"$(/bin/date -d "+$dayAdd day" +%Y-%m-%d)\",\
			\"begintime\":$(/bin/date -d "+$dayAdd day +$beginSecond second" +%s)000,\
			\"endtime\":$(/bin/date -d "+$dayAdd day +$endSecond second" +%s)000,\
			\"data\":[\
				\{\"package\":\"com.app$[$RANDOM % $packageSum]\",\"activetime\":$[$activetime]000\}\  #这一行的{}需要转义
			]\
		} > /dev/tcp/$host/$port
		break
		sleep 0.4
	done
	break
	dayAdd=$[$dayAdd+1]
	sleep 1.5
done 


创建变量指向带有空格的路径：
dir='/home/vega/Documents/Tencent Files/641370196' #不能够 ls $dir 自动按照空格分隔成两部分
# dir="'/home/vega/Documents/Tencent Files/641370196'" #还是无效，似乎所有的引号都会被$dir解掉，所以应该直接在$dir外套一层
# ls /home/vega/Documents/Tencent\ Files/641370196
ls "$dir" #因为$dir中有空格，所以不能配合for循环使用


#!/bin/bash
IMAGE_DIR=/home/vega/Desktop/NewFolder1234
echo ${IMAGE_DIR: -4} #输出1234




#!/bin/bash
DIR=$1
for i in $(echo $DIR/*); do 
	if [ ${i: -3} = 'jpg' ]; then
		# SUB_DIR=$(echo $i | awk -F. '{print $1}')
		# echo $SUB_DIR
		echo $i
	fi
done
输出： 相对路径是不会被shell自动转换为绝对路径的，但是在文件系统路径识别函数中是可以被识别的
vega@vega-Laptop:~/Documents/Tencent Files/641370196/FileRecv/done$ ./haha.sh ./
.//2012河姆渡B309_1.jpg
.//2012河姆渡B310_1.jpg
.//2012河姆渡B311_1.jpg
.//2012河姆渡B312_1.jpg
echo $i | awk -F. '{print $2}' 出来也不是我想要的，多了两个斜杠，推荐echo $i | awk -F. '{print $2}' | cut -b 3- ，使用awk去掉后缀，在用cut或者${xxxx字符串表示法}去掉多余的前缀

#!/bin/bash
part_mongo_url='10.16.56.15:17031
10.16.56.14:17031
10.16.56.16:17031
10.21.46.84:17031
10.21.46.86:17031
10.21.46.81:17031
10.21.46.83:17031'
part_mongo_url=($part_mongo_url)
machine='
10.20.63.134
10.20.77.136
10.20.77.149
10.20.77.153
10.20.77.159
10.20.77.195
10.20.77.205
10.20.77.214
10.20.78.104
10.20.78.137
10.20.78.207
10.20.78.208
10.20.78.214
10.20.78.216
10.20.78.41
10.20.78.43
10.20.78.69
10.20.78.95
10.20.79.18
10.20.79.41
10.21.33.200
10.21.33.22
10.21.33.75
10.21.33.88
10.21.34.133
10.21.34.136
10.21.34.20
10.21.34.226
10.21.34.31
10.21.34.34
10.21.34.72
10.21.34.90
10.21.35.218
10.21.36.101
10.21.36.103
10.21.36.134
10.21.36.135
10.21.36.144
10.21.36.151
10.21.36.153
10.21.36.194
10.21.36.197
10.21.36.210
10.21.36.214
10.21.36.217
10.21.36.218
10.21.36.225
10.21.36.230
10.21.36.232
10.21.36.39
10.21.36.71
10.21.36.75
10.21.36.81
10.21.36.97
10.21.36.98
10.21.37.101
10.21.37.13
10.21.37.135
10.21.37.145
10.21.37.160
10.21.37.165
10.21.37.17
10.21.37.196
10.21.37.199
10.21.37.205
10.21.37.225
10.21.37.27
10.21.37.33
10.21.37.34
10.21.37.38
10.21.37.49
10.21.37.50
10.21.37.67
10.21.37.76
10.21.37.78
10.21.37.88
10.21.37.92
10.21.37.96
10.21.37.97
10.21.38.14
10.21.42.130
10.21.42.161
10.21.42.163
10.21.42.19
10.21.42.216
10.21.42.28
10.21.42.33
10.21.42.47
10.21.42.80
10.21.42.90
10.21.43.103
10.21.43.12
10.21.43.132
10.21.43.135
10.21.43.136
10.21.43.168
10.21.43.32
10.21.43.35
10.21.43.37
10.21.43.66'
machine=($machine)
part_db=news_article_category_push_mongo_db_200_
collection=device_info
read -p "请输入task_id " task_id
read -p "请输入查询的天数day " day

split_sum=200
length=$[$split_sum/${#part_mongo_url[@]}]
for i1 in `seq 0 $[$split_sum-1]`;do
  machine_address=http://${machine[$i1%${#machine[@]}]}:6789
  mongo_url=mongodb://pushadmin:0YWjXCbLnMk0ELRk@${part_mongo_url[$i1%${#part_mongo_url[@]}]}/admin
  /usr/bin/curl -v -G -d "task_id=$task_id&day=$day&mongo_url=$mongo_url&db=${part_db}${i1}&collection=$collection" $machine_address > /dev/null 2>&1 #curl会输出到标准错误与标准输出
done




For small requests, it's generally much faster to do 10 requests each on 1 connection, than 1 request each on 10 connections. For Henry's HTTP post test server, the difference is 2.5x:
$ time for i in {1..10}; do
    curl -F foo=bar https://posttestserver.com/post.php ;
  done
Successfully dumped 1 post variables.
View it at http://www.posttestserver.com/data/2016/06/09/11.44.48536583865
Post body was 0 chars long.
(...)
real    0m2.429s
vs

$ time  {
    array=();
    for i in {1..10}; do
      array+=(--next -F foo=bar https://posttestserver.com/post.php ) ; 
    done; 
    curl "${array[@]}";
 }
Successfully dumped 1 post variables.
View it at http://www.posttestserver.com/data/2016/06/09/11.45.461371907842
(...)
real    0m1.079s
#使用sem，并限制并发数为4
for i in {1..20}
do 
  sem -j 4 curl -F foo=bar https://posttestserver.com/post.php
done
sem --wait
#我使用
/usr/bin/curl -v -G -d "task_id=$task_id&day=$day&mongo_url=$mongo_url&db=${part_db}${i1}&collection=$collection" $machine_address > /dev/null 2>&1 & #使用后台进程，取消脚本循环中对curl关于http响应的等待，上面命令其实应该加上一个等待超时与重试  -t 0 -T 3
