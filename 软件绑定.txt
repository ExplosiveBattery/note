总体方法：
0.设置一个网站作为软件是否与怎么运行的key，如果一直不联网就一直使用默认状态运行。
1.与硬件进行捆绑，第一次使用进行取值与记录，后面进行数值匹配。有一种通用破解方法就是硬件虚拟技术。
2.设置软件注册码这样

东西存那里可以去借鉴一下已经实现了的那些需要授权的软件，他们是怎么记录授权状态



CPU/主板/显卡/网卡/声卡/显示器/内存/BIOS序列号：
说明：目前存在的CPU几乎都支持CPUID指令。这个指令不仅可以获取CPU生产厂商等基本信息，还可以获取其他有关CPU的硬件信息，包括CPU序列号。序列号基本唯一，Intel官方文档表示不能保证唯一性，CPU批号的话就CPU型号。进行保密考虑的CPU不支持CPU序列号获取，BIOS中可能可以禁用序列号功能。
安全性：通过虚拟化技术比如VMware等虚拟机可以轻松的更改虚机的CPU序列号。

网卡MAC：
说明：这个能保证全世界的唯一性
安全性：更改方式（方便的是在注册表中进行伪造，防伪造就是不从注册表中读取）与软件都已经存在了不少

硬盘序列号：
说明：除了一些特殊硬盘外，大部分硬盘都有自己唯一的硬件序列号，而且不可修改。硬盘更换算是硬件里面最频繁的，而且不少是具有多个，不过主硬盘是只有一个的。
安全性：虚拟化技术破解

分区表/分区情况：
说明：这个详细程度看自己，有几个盘，每个盘的大小。硬盘分区序列号，是分区软件指定的，每次重新分区的时候这个序列号都会发生变动。对于GPT硬盘分区来说，每一个分区都使用全球唯一的UUID来标识，具有良好的唯一性和可用性。另外对于RAID设备来说，分区序列号同样存在并可用。
安全性：毫无安全性，就胜在一般不会有人考虑到这个。但是这时候人们基本上都是靠逆向找到你进行了哪几个验证。


C语言总体方法：
方法零、基本所有的信息都可以从注册表获取，但是这种获取方式是不安全的。
方法一、查找对应的Windows API
方法二、使用WMI。WMI即windows管理规范。通过它可以访问、配置、管理和监视几乎所有的Windows资源。
方法三、比如说CPU信息，我见过编写C与汇编的混合代码，那获取CPU信息就是用cpuid指定
特殊方法、linux下可以配合命令来实现
Qt方法、QList<QNetworkInterface>
获取MAC的方法：获取网卡列表-》查询每块网卡的类型与MAC地址
"ethernet_32776\nD0:50:99:9A:26:31\nethernet_32778\n00:50:56:C0:00:01\nethernet_32779\n00:50:56:C0:00:08\nloopback_1\n\ntunnel_32768\n00:00:00:00:00:00:00:E0\ntunnel_32769\n00:00:00:00:00:00:00:E0\ntunnel_32770\n00:00:00:00:00:00:00:E0\ntunnel_32771\n00:00:00:00:00:00:00:E0\n" 一个真正+一个回环+两个虚拟机
1.比如说获取MAC就使用对应的Netbios API，而这需要你启动Netbios服务，如果你启动了文件共享的话拿到不是问题。Netbios API只包括了一个函数，就叫做Netbios，传入函数的是一个结构体对象，在对象中有一个 UCHAR　ncb_command;来告知函数需要用NetBios做什么事情。默认情况下win应该都是可以使用的。
//cygwin g++ main.c -lnetapi32
#include <windows.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

// Dev C++ -> include libnetapi32.a
// BCC 5.5 or VC++ -> #pragma comment(lib,"netapi32.lib")

 
typedef struct _ASTAT_
{
	ADAPTER_STATUS adapt;
	NAME_BUFFER NameBuff [30];
} ASTAT, *PASTAT;
 
void getMac(char * mac)
{
    ASTAT Adapter;
    NCB Ncb;
    UCHAR uRetCode;
    LANA_ENUM lenum;
    int i = 0;
 
    memset(&Ncb, 0, sizeof(Ncb));
    Ncb.ncb_command = NCBENUM;
    Ncb.ncb_buffer = (UCHAR *)&lenum;
    Ncb.ncb_length = sizeof(lenum);
 
    uRetCode = Netbios( &Ncb );
    printf( "The NCBENUM return adapter number is: %d \n ", lenum.length);
    for(i=0; i < lenum.length ; i++)
    {
        memset(&Ncb, 0, sizeof(Ncb));  //先进行重置
        Ncb.ncb_command = NCBRESET;
        Ncb.ncb_lana_num = lenum.lana[i];
        uRetCode = Netbios( &Ncb );
 
        memset(&Ncb, 0, sizeof(Ncb));
        Ncb.ncb_command = NCBASTAT;
        Ncb.ncb_lana_num = lenum.lana[i];
        strcpy((char *)Ncb.ncb_callname, "* ");
        Ncb.ncb_buffer = (unsigned char *) &Adapter; //设置函数结果缓冲区
        Ncb.ncb_length = sizeof(Adapter);
        uRetCode = Netbios( &Ncb );
 
        if (uRetCode == 0)
        {
            sprintf(mac, "%02X%02X%02X%02X%02X%02X ",
                    Adapter.adapt.adapter_address[0],
                    Adapter.adapt.adapter_address[1],
                    Adapter.adapt.adapter_address[2],
                    Adapter.adapt.adapter_address[3],
                    Adapter.adapt.adapter_address[4],
                    Adapter.adapt.adapter_address[5]
                   );
            printf( "The Ethernet Number on LANA %d is: %s\n ", lenum.lana[i], mac);
        }
    }
}
 
int main(int argc, char *argv[])
{
    char *mac=new char[32];
    getMac(mac);
    printf( "%s\n ", mac); 会把虚拟机里面的MAC都显示出来，但是最后显示的是本机的。
    delete[]mac;
    system( "PAUSE> NUL ");
    return 0;
}
2.使用COM GUID API
从COM API创建一个GUID（全局唯一标识符）并从那里继承MAC地址。这种方法不是很好，因为GUID是从MAC地址等计算过来的，只是表面上包含
//Cygwin  g++ main.c -lole32
#include "objbase.h"
#include <windows.h>
#include <iostream>
#include <cstdio>
#pragma comment(lib, "ole32.lib")
using namespace std;
int main()
{
	cout << "MAC address is: ";
	// 向COM要求一个UUID。如果机器中有以太网卡，
	// UUID最后的六个字节(Data4的2－7字节)应该是本地以太网卡的MAC地址。
	GUID uuid;
	CoCreateGuid(&uuid);
	// Spit the address out
	char mac_addr[18];
	sprintf(mac_addr,"%02X:%02X:%02X:%02X:%02X:%02X",
	uuid.Data4[2],uuid.Data4[3],uuid.Data4[4],
	uuid.Data4[5],uuid.Data4[6],uuid.Data4[7]);
	cout << mac_addr << endl;
	
	return 0;
}

C#：
public static List<string> GetMacByNetworkInterface()
{
  List<string> macs =new List<string>();
  NetworkInterface[] interfaces = NetworkInterface.GetAllNetworkInterfaces();
  foreach (NetworkInterface ni in interfaces)
  {
    macs.Add(ni.GetPhysicalAddress().ToString());
  }
  return macs;
}
3.使用SNMP扩展API
4.GetAdaptersInfo()使用这种方法一旦网卡信息被禁止获取就会失效。可以知道Adapter Name,Mac,Ip,NetMask,NetGate
#include <winsock2.h>//这个不能去掉
#include <Iphlpapi.h>
#include <stdio.h>
/*
需要两：iphlpapi.lib  ws2_32.lib 静态库（VC添加工程LINK）。实际使用 g++ main.c -liphlpapi就好了。
*/
void byte2Hex(unsigned char bData,unsigned char hex[])
{
    int high=bData/16,low =bData %16;
    hex[0] = (high <10)?('0'+high):('A'+high-10);
    hex[1] = (low <10)?('0'+low):('A'+low-10);
}
 
int getLocalMac(unsigned char *mac) //获取本机MAC址 
{
    ULONG ulSize=0;
    PIP_ADAPTER_INFO pInfo=NULL;
    int temp=0;
    temp = GetAdaptersInfo(pInfo,&ulSize);//第一处调用，获取缓冲区大小
    pInfo=(PIP_ADAPTER_INFO)malloc(ulSize);
    temp = GetAdaptersInfo(pInfo,&ulSize);
 
    int iCount=0;
    while(pInfo)//遍历每一张网卡
    {
        //  pInfo->Address MAC址
        for(int i=0;i<(int)pInfo->AddressLength;i++)
        {
            byte2Hex(pInfo->Address[i],&mac[iCount]);//BYTE Address[MAX_ADAPTER_ADDRESS_LENGTH];
            iCount+=2;
            if(i<(int)pInfo->AddressLength-1)
            {
                mac[iCount++] = ':'; 最前面的本机MAC
            }else 
            {
                mac[iCount++] = '#'; 后来的都是虚拟机MAC
            }
        }
        pInfo = pInfo->Next;
    }
 
    if(iCount >0)
    {
        mac[--iCount]='\0';
        return iCount;
    }
    else return -1;
}
 
int main(int argc, char* argv[])
{
    unsigned char address[1024];
    if(getLocalMac(address)>0)
    {
        printf("mac-%s\n",address);
    }else
    {
        printf("invoke getMAC error!\n");
    }
    return 0;
}
这种方法获取到的第一个MAC地址是本机地址，之后会有虚拟机MAC
printf("%s\n",pInfo->AdapterName);
printf("%s\n",pInfo->Description);
{A43D4E2D-D376-4E51-A385-99B9DD3B8CF2} 这个是本机
Intel(R) Ethernet Connection (2) I219-V #2
{BD30D7A4-5864-4284-B15A-95B0E01BEF8C} 
VMware Virtual Ethernet Adapter for VMnet1 #2 #2
{03C0720E-EA2F-4BAF-A391-539443688C76}
VMware Virtual Ethernet Adapter for VMnet8 #2 #2



Linux下从socket来获取MAC地址：
int get_mac(char* mac)
{
    struct ifreq tmp;
    int sock_mac;
    char mac_addr[30];
    sock_mac = socket(AF_INET, SOCK_STREAM, 0);
    if( sock_mac == -1)
    {
        perror("create socket fail\n");
        return -1;
    }
    memset(&tmp,0,sizeof(tmp));
    strncpy(tmp.ifr_name,"eth0",sizeof(tmp.ifr_name)-1 );
    if( (ioctl( sock_mac, SIOCGIFHWADDR, &tmp)) < 0 )
    {
        printf("mac ioctl error\n");
        return -1;
    }
    sprintf(mac_addr, "%02x:%02x:%02x:%02x:%02x:%02x",
            (unsigned char)tmp.ifr_hwaddr.sa_data[0],
            (unsigned char)tmp.ifr_hwaddr.sa_data[1],
            (unsigned char)tmp.ifr_hwaddr.sa_data[2],
            (unsigned char)tmp.ifr_hwaddr.sa_data[3],
            (unsigned char)tmp.ifr_hwaddr.sa_data[4],
            (unsigned char)tmp.ifr_hwaddr.sa_data[5]
            );
    close(sock_mac);
    memcpy(mac,mac_addr,strlen(mac_addr));
    return 0;
}

最终我在windows上使用函数：
#include <winsock2.h>
#include <iphlpapi.h> //iphlpapi.lib
#include <stdio.h>
int getLocalMac() //获取本机MAC址 
{
    ULONG ulSize=0;
    PIP_ADAPTER_INFO pInfo=NULL;
    int temp=0;
    temp = GetAdaptersInfo(pInfo,&ulSize);//第一处调用，获取缓冲区大小
    pInfo=(PIP_ADAPTER_INFO)malloc(ulSize);
    temp = GetAdaptersInfo(pInfo,&ulSize);
	return pInfo->AdapterName[1]+pInfo->Address[2]; //这个好，因为 v2 = v12[9] + v12[406]; IDA只能给出相对于分配空间的位置
}//但是函数名全被翻译出来了，这就没什么用了。
int main(int argc, char* argv[])
{
    printf("%d",getLocalMac() );
    return 0;
}
我这个函数可以放在动态链接库中使用


结合popen函数使用就很方便了：
命令行获取主板序列号：wmic BaseBoard get SerialNumber
SerialNumber
M80-5B028400369
命令行CPU序列号：
wmic cpu get processorid
ProcessorId
BFEBFBFF000506E3
获取mac：ipconfig/all  走正则，匹配到的第一个D0-50-99-9A-26-31这样子就是了




信息保存：
有些程序把注册信息放在一个.ini文件里，大多数是写入注册表中，可以用你输入的用户名和假注册码试做在系统盘（C:\或者C:\windows\）下搜索.ini文件，其中包含用户名和假注册码等信息。也可以在注册表中查找！但是考虑到PE结构，我们可以直接把信息写回到exe，只要你给他留出足够的空间。或者你可能会给你的软件加上一些背景之类的，所以可以把信息写入图片、图标。所以把除了exe以外的内容全都替换一遍没准可以破解写入图片。写入注册表的好处就是基本不会被改变，除非被注册表清理工具清除。