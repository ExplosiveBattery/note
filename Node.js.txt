使用node 版本管理工具安装稳定版node：https://www.jianshu.com/p/aa8933a40b78
node -v查看安装的nodejs版本，出现版本号，说明刚刚已正确安装nodejs

NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：
允许用户从NPM服务器下载别人编写的第三方包到本地使用。
允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。
允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。
sudo npm install npm -g linux升级nmp命令
npm install npm -g windows升级nmp命令

使用淘宝镜像的命令：（你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm）（同步频率很快似乎是 10分钟）
npm install -g cnpm --registry=https://registry.npm.taobao.org
cnpm install npm -g 以后命令使用cnmp都是使用淘宝镜像了

npm help  npm help <command>可查看某条命令的详细帮助
npm -v
npm search <Module Name>
npm install <Module Name>包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require('express') 的方式就好，无需指定第三方包路径。比如对于express框架包：var express = require('express');
	本地安装
	1. 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。
	2. 可以通过 require() 来引入本地安装的包。
	全局安装（加上-g参数）（也就是安装路径的不同）
	1. 将安装包放在 /usr/local 下或者你 node 的安装目录。
	2. 可以直接在命令行里使用。
	如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。
	如果出现以下错误：npm err! Error: connect ECONNREFUSED 127.0.0.1:8087 解决办法为：npm config set proxy null
npm update <Module Name>    npm update <package> -g可以把全局安装的对应命令行程序更新至最新版
npm uninstall <Module Name>
npm list 这条命令可以用来查看安装了哪几个模块，加上-g参数以后查看的就是安装的全局模块。也可以加上指定查询的<Module Name>，可以查看到模块的当前版本号。
npm ls 这条命令是查看当前目录下node_modules/ 目录中存在的模块包
自己制作模块：
	nmp init 使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果
	npm adduser 在 npm 资源库中注册用户
	npm publish 发布模块
	npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码
	npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。
	
	
Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。
准备工作
	安装node环境:node.js
	安装Git，bower从远程git仓库获取代码包
然后使用npm install -g bower就可以进行安装了
.bowerrc文件是自定义bower下载的代码包的目录，需要我们自己来创建这个文件
	那我的.bowerrc文件内容如下：bower install jquery 的时候就会将jquery下载到js/lib中
	{
	  "directory" : "js/lib"
	}
bower init会提示你输入一些基本信息，根据提示按回车或者空格即可，然后会生成一个bower.json文件，用来保存该项目的配置
bower install jquery --save其中--save参数是保存配置到你的bower.json
bower info jquery 会看到jquery的bower.json的信息，和可用的版本信息
bower.json文件中的jquery版本号再bower update  bower就会为你切换jquery的版本了
bower uninstall jquery

gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成。gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。
npm install --global gulp	
cnpm install gulp --save-dev -g
全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能。
gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）：
	var gulp = require('gulp');

	gulp.task('default', function() {
	  // 将你的默认的任务代码放在这
	});
gulp来运行

gulp只有四个API： task，watch，src，和 dest
	task这个API用来创建任务，在命令行下可以输入 gulp test 来执行test的任务。
	watch这个API用来监听任务。
	src这个API设置需要处理的文件的路径，可以是多个文件以数组的形式[main.scss, vender.scss]，也可以是正则表达式/**/*.scss。
	dest这个API设置生成文件的路径，一个任务可以有多个生成路径，一个可以输出未压缩的版本，另一个可以输出压缩后的版本。
var gulp = require('gulp'),//加载插件
    sass = require('gulp-sass'),
    autoprefixer = require('gulp-autoprefixer'),
    minifycss = require('gulp-minify-css'),
    jshint = require('gulp-jshint'),
    uglify = require('gulp-uglify'),
    imagemin = require('gulp-imagemin'),
    rename = require('gulp-rename'),
    concat = require('gulp-concat'),
    notify = require('gulp-notify'),
    cache = require('gulp-cache'),
    livereload = require('gulp-livereload');
// Styles任务：编译sass、自动添加css前缀和压缩
gulp.task('styles', function() {
    return gulp.src('stylesheets/main.scss')
    .pipe(sass())
    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))
    .pipe(gulp.dest('stylesheets'))
    .pipe(rename({ suffix: '.min' }))
    .pipe(minifycss())
    .pipe(gulp.dest('assets'))
    .pipe(notify({ message: 'Styles task complete' }));
});
// Scripts：js代码校验、合并和压缩
gulp.task('scripts', function() {
  return gulp.src('javascripts/*.js')
    .pipe(jshint())
    .pipe(jshint.reporter('default'))
    .pipe(concat('all.js'))
    .pipe(rename({ suffix: '.min' }))
    .pipe(uglify())
    .pipe(gulp.dest('assets'))
    .pipe(notify({ message: 'Scripts task complete' }));
});
// Images：图片压缩
gulp.task('images', function() {
  return gulp.src('images/*')
    .pipe(cache(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true })))
    .pipe(gulp.dest('images'))
    .pipe(notify({ message: 'Images task complete' }));
});
// Default task
gulp.task('default', function() {
    gulp.start('styles', 'scripts', 'images');
});
// Watch
gulp.task('watch', function() {
  // Watch .scss files
  gulp.watch('stylesheets/*.scss', ['styles']);
  // Watch .js files
  gulp.watch('javascripts/*.js', ['scripts']);
  // Watch image files
  gulp.watch('images/*', ['images']);
  // Create LiveReload server
  livereload.listen();
  // Watch any files in assets/, reload on change
  gulp.watch(['assets/*']).on('change', livereload.changed);
});
gulp watch指定任务名就是运行指定的任务，直接gulp就是运行所有的任务。

最后是我自己设置的项目文件路径
|--/assets/--------压缩后样式和脚本存放的目录
|--/images/--------图片存放目录
|--/javascripts/---脚本存放目录
|--/stylesheets/---样式存放目录
|--/plugin/--------插件存放目录
|--gulpfile.js


前端在node上，所有请求都自己完成了。如果是这样的话，就不好用自己的脚本进行防DOS了。