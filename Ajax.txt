	AJAX大家已经都知道了，是为了实现异步通讯（前端的显示与后台的异步操作），提高用户体验度，而将很多旧知识（XML,DOM,JavaScript,HTML,jQuery,Css……）重新融合的一个新的知识框架。而，XMLHttpRequest对象则是其中的重中之重。家臣有：DOMString(DOMString就是String。规范解释说DOMString指的是UTF-16字符串)、Document、FormData、Blob、File、ArrayBuffer这些类型。也就是在XMLHttpRequest Level 2背景下，我们Ajax可以发送任意这些类型的数据。如果不使用ajax，那么在返回的内容中加上“<script>history.go(-1);</script>”，就能回到原页面。
	XMLHttpRequest 2.0新增FormData对象， 比起普通的ajax, 使用FormData的最大优点就是我们可以异步上传一个二进制文件。
	当datatype:json时，如果返回的字符串并不是完全符合json格式，就会进入error回调函数。{"msg","success"}。

解决ajax跨域访问：   注意这两个jquery js的顺序
<script src="http://www.5iweb.com.cn/statics/js/jquery.1.7.1.min.js" type="text/javascript"></script>
<script src="http://malsup.github.io/jquery.form.js" type="text/javascript"></script>
上面两个头文件是很简化版了，所以导致一个问题，虽然有success:但是却没有error:
如果jquery文件被重复包含，也会导致说$(...)xxxxx未定义
方法一：使用头来让浏览器允许进行跨域请求
Access-Control-Allow-Origin:*
Access-Control-Allow-Methods:POST //指定了这个以后就可以进行POST跨域
Access-Control-Allow-Headers:x-requested-with,content-type
function saveReport() {

	//ServletActionContext.getResponse().setHeader("Access-Control-Allow-Origin", "*"); 跨域访问的关键支持在于返回的包头中要有允许

		$("#form").ajaxSubmit(function(message) {

			alert("尝试成功提交！");
			/*
			type:'post',
			url:'url',
			data:{
				'title':title,
				'content':content,
			},
			success:function(data) { //data返回提交后返回的数据，一般是json格式 
				alert('提交成功！');
				$(this).resetForm();//提交后重置表单重置
			}
			*/
		});

		return false;
	} 

方法二：  Do not use both ajaxSubmit and ajaxForm on the same form.
<!--另外一种使用姿势-->
<script type="text/javascript">
var ajax_option={
	url:"login",//默认是form action
	success:function(data){}
}
$('#testForm').ajaxSubmit(ajax_option);
</script>

方法三：
还可以配合虚拟表单使用：
<script type="text/javascript">   
 function post(URL) {
	var temp = document.createElement("form");
	temp.id ="tempForm";
	temp.action =URL;
	temp.method = "post";
	temp.style.display = "none";
	var opt=document.createElement("input");
	opt.value =document.getElementsByName("Phone")[0].value;
	temp.appendChild(opt);
	document.body.appendChild(temp);
	console.log(temp);
	$("#tempForm").ajaxSubmit(function(message) {});
	
	return false;
}
</script> 

<!--js提交请求-->
function createCORSRequest(method, url) {
  var xhr = new XMLHttpRequest();
  if ("withCredentials" in xhr) {

    // "withCredentials"属性是XMLHTTPRequest2中独有的
    xhr.open(method, url, true);

  } else if (typeof XDomainRequest != "undefined") {

    // 检测是否XDomainRequest可用
    xhr = new XDomainRequest();
    xhr.open(method, url);

  } else {

    // 看起来CORS根本不被支持
    xhr = null;

  }
  return xhr;
}
见到在apk中使用window.crossDomain = "http://120.55.190.41:8822";
createCORSRequest函数如果返回的对象为空，记得throw a exception。

方法四：jsonp
还有种常用的方法使用jsonp，这不是官方方法，同时也不支持POST，只支持GET方法。如果你使用POST就会自动变成GET。
原理在于有”src”这个属性的标签都拥有跨域的能力，比如<script>、<img>、<iframe>，然后借助json来描述数据的复杂性
Jsonp(JSON with Padding) 是 json 的一种"使用模式"，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。
http://ip.chinaz.com/getip.aspx 可以获取ip，但是不是采用函数调用的方式，所以没法传递
htmlspecialchars的作用是将把 < 和 > 转换为实体常用于防止浏览器将其用作 HTML 元素，也就是对<和>进行转义。
<?php
header('Content-type: application/json');
//获取回调函数名
$jsoncallback = htmlspecialchars($_REQUEST ['jsoncallback']); 
//json数据
$json_data = '["customername1","customername2"]';
//输出jsonp格式的数据
echo $jsoncallback . "(" . $json_data . ")";
?>会显示 callbackFunction(["customername1","customername2"])
我们通过<script></script>来引用这个页面，然后并在另外一个<script></script>中定义callbackFunction()。没想到这样就是Jsonp。

其他方法：ActiveX控件、服务端代理、属于未来的HTML5之Websocket





$using 这个函数是某一个框架中的自带函数，第一次见到这种使用$开头的函数：
<script type="javasciprt">
	$using("frame") ;
	$using("rui") ;
</script>


返回数据：
返回一个html页面：$("#content-wrapper").html(data);
返回一个String：alert(data);
返回一个json：
	var jsonData = JSON.parse(data);            
        if (jsonData.flag == 0) {//请求成功
            alert("后台操作成果");  
        } else {
            alert(jsonData.msg);  
        }
