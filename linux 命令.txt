less、more、cat、tac（cat反向）、echo、head、tail、od（十六进制查看）
less 查看文件方便 超找对应内容(/xxxx n继续 N反向继续) 文件尾(g)     

which xxxx
返回执行命令使用的可执行文件路径

history 查询从前用过的指令
Time xxx 显示任务执行的时间，比如time ls会显示：
real	0m0.002s
user	0m0.000s
sys	0m0.004s

$ tar [-z|-j|-J] [cv] [-f 新建的 tar 文件] filename...  ==打包压缩
$ tar [-z|-j|-J] [tv] [-f 已有的 tar 文件]              ==查看
$ tar [-z|-j|-J] [xv] [-f 已有的 tar 文件] [-C 目录]    ==解压缩
-z ：使用 zip；
-j ：使用 bzip2；
-J ：使用 xz；
-c ：新建打包文件；
-t ：查看打包文件里面有哪些文件；
-x ：解打包或解压缩的功能；
-v ：在压缩/解压缩的过程中，显示正在处理的文件名；
-f : filename：要处理的文件；
-C 目录 ： 在特定目录解压缩。


last 按时间顺序倒叙显示登录者账号信息


将 last 输出的信息所有小写转换为大写： last | tr '[a-z]' '[A-Z]'
col 将 tab 字符转为空格字符
join file1 file2 将有相同数据的那一行合并在一起。(无视行数)
paste file1 file2 直接将两行粘贴在一起。

C-w 删除当前输入终端的文字
aptitude 高级的apt，更好地管理依赖关系，比如降级 ： https://blog.csdn.net/adparking/article/details/7176655
apt-cache madison dde-launcher 查看指定package的版本
apt-cache search dde-launcher 搜索相关名字与注释的package

-f image2 /tmp/webCam/%d.jpg 产生的文件名字是从1开始的数字递增，如果是%9d那就是9位数字。
	不过不少程序的-f/-F参数都是用来描述工作在前端还是后台
处理空格使用转义或者字符串包起来
nmap -sn | grep "sn"《=》nmap -sn | grep sn
ls && ls 《=》 ls;ls
默认情况下的$PATH是这样的/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin让人疑惑的是寻找执行那个文件的时候是先从/usr/bin(apt安装)开始，然后找到的才是/usr/local/bin（自己编译安装）

只有sudoers用户才能命令前被sudo
重启网卡服务： 注意是networking
service networking restart
service network-manager restart 尤其是插入usb网卡的时候
systemctl restart network.service

systemd-analyze blame 得到各个程序开机时间

两个与xshell ssh有关命令：
	sz：将选定的文件发送（send）到本地机器
	rz：运行该命令会弹出一个文件选择窗口，从本地选择文件上传到服务器(receive)
ssh包中传文件为scp root@1.1.1.1:/home/xxxx ./xxxx

source /etc/profile  刷新profile，不需logout而生效
但是只能刷新执行了这条命令的shell，而且deepin15.5使用这条命令之后you-get会出问题，但是仅仅export不会

所谓的待机（standby）、挂起（suspend）、睡眠（sleep）应该都是一个概念，内存和处理器处于加电状态,其余设备断电。
systemctl hibernate #休眠(休眠一般就是把内存中的数据写入硬盘,swap文件，swap分区的大小就与其功能有关系，还有虚拟内存的功能，总之swap就是充当内存的替补角色)
systemctl suspend  #待机 
systemctl suspend-hybrid #混合待机
systemctl powersave #省电模式


alias rm='xxx' //创建命令的别名 只保证当前终端有效
如果需要使用原来的rm命令：   \rm

ssh-keygen -t rsa -C "username@mail.com" 生成ssh密钥对
默认使用id_rsa与id_rsa.pub ，如果使用其他文件在~/.ssh/config或者其他配置文件中，否则需要每次ssh的时候指定私钥文件的具体路径：
Host devbox-host
    IdentityFile ~/.ssh/tce_rsa
ssh-copy-id 将本机的pub key复制到指定主机的.ssh/authorized_keys文件中（ssh服务器才会有这个文件）
ssh -T git@github.com check ssh key
git config --global user.name "Les1ie"
git config --global user.mail "xxxx@xx.com"
配置好的kali推送文件到github一直不能推送上去，问了SCU_Linux的小伙伴们也不清楚， 最后在#linuxba 的irc上问了下，才知道 github的https是 readonly的，只有ssh通道才能推送，记一下


script -a <filename> 记录终端的命令，但是一些远程主机不允许下载，所以需要本地终端能提供一个命令记录的日志功能，exit退出




类似于chmod, chmod只是改变文件的读写、执行权限，更底层的属性控制是由chattr来改变的。有时候你发现用root权限都不能修改某个文件，大部分原因是曾经用chattr命令锁定该文件了。但是它并不适合所有的目录。chattr命令不能保护/、/dev、/tmp、/var目录。
lsattr
chattr 改变文件/文件夹的读写属性  
“+文件属性” 就是添加该属性；“-文件属性”去掉此属性；“=文件属性” 此文件有且只有这属性
+i 禁止写入   -i 取消禁止
+a 允许追加操作

下面这些在写shell脚本的时候挺有用：
dirname 目录（不带文件名）
basename 文件名（不带目录）

egrep是用extended regular expression语法来解读的，而grep则用basic regular expression 语法解读
来自: http://man.linuxde.net/egrep
使用awk和cut以及grep命令能控制着一个很好的输出
cut -d 指定分界符
-f  ：与-d一起使用，指定显示哪个区域。这时候又会默认打印没有分界符的行，除非指定-s
cut -d : -f 1,3-5,7
cut -d : -f -2  #省略了-前面的1
cut -b 4- /home/vega/Desktop/NewFolder/5.jpg #对文件操作
echo /home/vega/Desktop/NewFolder/5.jpg | cut -b 4- - #对字符串操作

使用echo >> file不能清空文件的内容，因为>>是追加模式
Linux /etc/bash.bashrc 下的环境变量 一定要把path export 出来啊。。。
sudo echo export PATH="$PATH:/home/pi/gst/gst-rtsp-server-1.10.0/examples" >> /etc/bash.bashrc
unset可以取消export
cp webcam.c back.webcam.c
这样子不影响Tab键的使用。

netstat除了可以查看端口以外，还可以查看有哪些套接字开着。
netstat -pantu（并非所有进程都能被检测到，所有非本用户的进程信息将不会显示，如果想看到所有信息，则必须切换到 root 用户）

screen命令（更好用的是tmux，可以放到后台还以再拉回前台）：
OpenSSH客户端就提供了一个名为“roaming（漫游）”的功能（该功能并未记录在介绍文档中）：如果客户端与SSH服务器的通信链接意外中断，当服务器同样支持roaming功能，那么客户端就可以与服务器重新连接，并重新恢复挂起的SSH会话操作。7.1p2版本的OpenSSH客户端（发布于2016年1月14日）默认禁用了roaming功能。
系统管理员经常需要SSH 或者telent 远程登录到Linux 服务器，经常运行一些需要很长时间才能完成的任务，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为它们执行的时间太长了。必须等待它们执行完毕，在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。
而GUN的screen提供了会话恢复、多窗口（tmux）、会话共享
screen -S yourname -> 新建一个叫yourname的session
screen -ls -> 列出当前所有的session（ls是list的简写）
screen -r yourname -> reattach 回到yourname这个session
screen -d yourname -> Detach 远程detach某个session
screen -d -r yourname -> 结束当前session并回到yourname这个session
[root@pvcent107 ~]# screen -dmS Urumchi
[root@pvcent107 ~]# screen -list
There is a screen on:
12842.Urumchi   (Detached)
1 Socket in /tmp/screens/S-root.
[root@pvcent107 ~]# screen -r Urumchi
[root@pvcent107 ~]# ping www.ibm.com &
[1] 9488
[root@pvcent107 ~]# pstree -p 9488   还有个tree会显示文件结构
init─┬─Xvnc
   ├─acpid
   ├─atd
   ├─screen───bash───ping
   ├─2*[sendmail]

而使用了 screen 后就不同了，此时 bash 是 screen 的子进程，而 screen 是 init（PID为1）的子进程。那么当 ssh 断开连接时，HUP 信号自然不会影响到 screen 下面的子进程了。
当我创建过一个msf的screen以后： 28897是pid
root@VM-91-79-debian:~# screen -list
There is a screen on:
	28897.msf	(08/22/2017 04:05:00 PM)	(Detached)
1 Socket in /run/screen/S-root.


battery@ubuntu:~$ screendump
/dev/tty0: 权限不够
无法读取 /dev/vcsa
打印ttyX的屏幕内容，我使用之后打印出了deepin开机的时候出现的错误

screenfetch 打印系统信息与硬件信息，非原生命令

make -j 56
-j [N], --jobs[=N]          同时允许 N 个任务；无参数表明允许无限个任务。
任务数的上限取决于CPU同时支持的线程数，不过对于如果I/O次数比较多的，就可以超过“上限”，更好地利用每一刻真正的上限。



查看指定任务的线程数： 四种方法
1。 使用top命令，具体用法是 top -H
        加上这个选项，top的每一行就不是显示一个进程，而是一个线程。
2。 使用ps命令，具体用法是 ps -axH
	-ax 显示所有的（虽然不是很明白）
	-H 显示线程
        这样可以查看所有存在的线程，也可以使用grep作进一步的过滤。
	-u 指定userlist
3。 使用ps命令，具体用法是 ps -mq PID
	-q  -p 的quick mode
	-m  Show threads after processes.
        这样可以看到指定的进程产生的线程数目。
更进一步，其实一些系统监控工具，在本质上也是读取的系统产生的文件罢了。比如说进程这个事情，现在假设有进程号为 5000 的进程，查看这个进程的所有具体信息，在哪查看呢?看看这个目录吧，/proc/5000/ 这里面有你所有想要的。其实stat代表着当前的一些信息。

使用ps命令查看内存是不准确的，因为其返回的是一个进程所用的所有空间，而由于linux的共享内存机制
top -p <PID> （非交互模式下需要-b）
sudo iotop -Po 
	-P, --processes 仅显示进程，默认iotop显示所有线程
	-o, --only 只显示正在产生I/O的进程或线程。除了传参，可以在运行过程中按o生效

curl 192.168.1. 然后相当于向192.168.0.1发包，我只是想说明curl的一些怪异行为。
curl --head http://192.168.3.139
会有一些内容输出到标准输出与标准错误流。
--connect-timeout 连接超时时间
--retry 重试次数

wget就是垃圾，经常下东西下到一半突然变成0KB/s，务必加上-t 0参数使之无限重连，-T 3设置超时事件(触发-T之后会重新下载)，虽然它支持断电续传，使用-c参数，但是在docker build的时候没有办法这么做（-c是在失败之前后多次执行中都是用-c，而docker中的相关命令只有一行）！听说还是单线程下载（是不是单线程下载看多播时候的网速或者自己ps）。
下载中断一般都是因为： Read error at byte 或者 Read Timeout


后台进程(仅仅含有&，不一定就会运行成功)，可以用来启动图形界面程序gedit、wireshark、ettercap -G。要想不挂起需要加上nohup或者setsid，记得处理stdout、stderr流
nohup 无疑能通过忽略 HUP 信号来使我们的进程避免中途被中断，但如果我们换个角度思考，如果我们的进程不属于接受 HUP 信号的终端的子进程，那么自然也就不会受到 HUP 信号的影响了。setsid ―――― run a program in a new session。或者使用screen。
[root@VM_206_70_centos ~]# php /path/PE/PE_scan.php&
[1] 16442
[root@VM_206_70_centos ~]# ps -axu | grep php
root      1495  0.0  0.5 133584  6064 ?        Ss   Mar17   0:55 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)
nginx     1509  0.0  0.8 135732  8268 ?        S    Mar17   0:00 php-fpm: pool www
nginx     1510  0.0  0.7 135732  7660 ?        S    Mar17   0:00 php-fpm: pool www
root     16442  0.0  0.9 194920  9472 pts/0    T    19:28   0:00 php /path/PE/PE_scan.php
root     16444  0.0  0.0   9032   672 pts/0    R+   19:28   0:00 grep --color=auto php
[1]+  Stopped                 php /path/PE/PE_scan.php
他一直停止后端还不能被kill，因为是STOP状态，只能使用fg命令将之转移到前端。bg命令也不能让他在后端执行起来。
可问题是之前明明都可以的啊。bg 1或者bg %1无效。
最后使用了setsid php PE_scan.php&总算是成功在后台运行起来了。加上nohup也可以。或者加一个< /dev/null ，改变标准输入流。
如果后台程序试图读取终端，这并不是一个错误，但是终端驱动程序将检测这种情况，并向后台作业发送一个特定信号SIGTTIN，该信号会停止此后台程序，并向用户发送通知。这时候后台变成Stopped状态。

/etc/fstab
mount -t ntfs -o rw /dev/sda1 /  -o 指定了 读写权限。写错名字了，不应该是/
umount /   这时候是可以正常卸载的，我还以为会弄掉原来的/，应该自己新建一个空目录然后挂载进去
mount -t ntfs -o remount,rw /dev/sda1 /  -o 额外指定了，希望重新挂载。但是我失败了....

linux下查看二进制模式查看文件 hexdump
	echo $IFS | hexdump，而直接hexdump或者对环境变量使用cat都会让终端“卡”在命令的执行中。
objdump 显示文件信息

SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root  我是用root账户打开的/etc/crontab，每个用户可以拥有自己的crontab文件
计划任务：crontab
# 文件格式说明
#  ――分钟（0 - 59）
# |  ――小时（0 - 23）
# | |  ――日（1 - 31）
# | | |  ――月（1 - 12）
# | | | |  ――星期（0 - 7，星期日=0或7）
# | | | | |
# * * * * * 用户名 被执行的命令
一个常见的错误是，命令行双引号中使用%时，未加反斜线\，例如：
1 2 3 4 5 touch ~/error_`date "+%Y%m%d"`.txt
# 正确的例子：
1 2 3 4 5 touch ~/right_$（date +%Y%m%d）.txt
1 2 3 4 5 touch ~/error_$（date '+%Y%m%d'）.txt
#容易被误导的写法
0 */3 * * *  并不是每3个小时的0分钟时候执行一次（相对于程序执行之后），而是每天的3点、6点、9点...都会执行
* */1 * * *  并不是每小时执行，因为没有指定分钟，于是<=>* * * * *即每小时的每分钟执行一次即每分钟执行一次
*/60  * * * * #每60分钟即每小时执行一次  不要想着后面的数字已经超过了0-59这个范围
*/105 * * * * #每105分钟执行一次
如果输出结果来自crontab里的命令，那么cron守护进程会用电子邮件将它发给用户。
若想关闭某个命令的输出结果，可以将输出结果重定向至/dev/null：
>/dev/null 2>&1(2>&1 时把出错输出也定向到标准输出)
* 0,2,4,6,8,10,12,14,16,18,20,22 * * * date >> /var/log/date.log
而上述设置会使该程序在偶数小时内的每一分钟执行一次
0 0,2,4,6,8,10,12,14,16,18,20,22 * * * date >> /var/log/date.log或者
0 */2 * * * date >> /var/log/date.log
可以在偶数小时的时候执行。
/sbin/service crond start //启动服务
/sbin/service crond stop //关闭服务
/sbin/service crond restart //重启服务
/sbin/service crond reload //重新载入配置 （确实是软件相关的配置文件，不一定所有的都会提供，service文件就像是一个switch脚本）
service crond status 查看crond守护进程服务当前状态
systemctl enable crond.service 将服务（service文件的执行）加入到开机启动
systemctl start crond.service
systemctl daemon-reload  openvas-start 重启服务
发送邮箱：
crontab -e 编辑crontab脚本（这样执行以后，属于用户自定义的，会被写到 /var/spool/cron 目录下，生成一个和用户名一致的文件，文件内容就是我们编辑的定时脚本），但不同于/etc/crontab后者是全局的。
crontab -h(可以看到有-l list)
MAILTO=example@gmail.com #自己的外部邮箱地址
如果没有装邮件服务器的要先安装一下：
yum install sendmail sendmail-cf m4
最终我的/etc/crontab配置如下：
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin #会覆盖PATH环境变量
MAILTO=stegano@hellovega.cn #腾讯云的Centos我并没有配置邮件服务器，但是发出来了！多个收件人估计是冒号隔开 root@VM_206_70_centos.localdomain是发件人

# For details see man 4 crontabs

# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)  #0表示24点
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name  command to be executed
  30 4  *  *  *  root   setsid php /path/PE/PE_scan.php& >/dev/null 2>&1 #后面没有重定向也行
  0  18 *  *  *  root   kill $(ps -aux | grep "php PE_scan.php" | awk '{print $2}')
cat  /var/spool/mail/root 这也就是邮件先存放的地方，你可以视为crontab命令执行结果。
cat *   #是个骚操作，如果有二进制文件也会被cat出来。本质上是shell解析*，并多次调用cat。
因为一个程序一般至少都需要几秒钟执行，所以最小单位是对分钟的设置，不然上一次没有执行完又不断开启新的程序。还不如在原来的程序中多线程执行。

定时任务：
at命令从标准输入读取一系列命令，把它们收集成一个计划任务，在此后的某个时刻执行。这个任务仍使用当前的环境，并在与计划制定时相同的工作目录和环境变量里执行。cron也支持设置crontab软件的环境变量，at好像是支持定制每一个定时应用的环境变量。
atq命令列出当前队列里的任务，atrm命令则从队列里删除任务：

at 1145 jan 31 #在一月三十一日上午11：45编译一个C语言程序：
> cc -o foo foo.c
> ^D #（光标在行首时使用Control-D退出任务编辑状态）
atq
1234 2011-08-12 11:45 cc -o foo foo.c user
atrm 1234
atq


date 命令
	显示：中用%D等来表示xxx内容，具体使用为date +%D
	设置：date 10201223 设置为10月20日12点23分

[root@VM_206_70_centos ~]# killall "php PE_scan.php"
php PE_scan.php: no process found
所以遗憾，不过借助要想在crontab中杀死指定的php进程并不是没有办法：
kill $(ps -aux | grep "php PE_scan.php" | awk '{print $2}')
pkill相当于ps+kill

vega@vega-Laptop:~$ echo a.a | awk -F. '{ print $1 }' 
 
a
vega@vega-Laptop:~$ echo a.a | awk -F. '{print $1}'
a
#按照分隔符来取分段，cut命令也可以
awk 语法详解 https://www.cnblogs.com/xudong-bupt/p/3721210.html 
https://coolshell.cn/articles/9070.html
awk '{print substr($NF,0,length($NF)-2), $0}' ~/mongodb.lipeinan.log2 | sort -n -k 1 -r 对mongo日志（已经根据最后一个字段筛选出包含ms的记录，为了排序将这个记录移动到新日志的第一列）倒序对大小排序
awk '{print $1":"$2}' 有一些特殊的字符需要双引号括起来才能拼接
NR表示从awk开始执行后，按照记录分隔符读取的数据次数，默认的记录分隔符为换行符，因此默认的就是读取的数据行数，NR可以理解为Number of Record的缩写。
$+数字表示列

https://coolshell.cn/articles/9104.html
sed -i "s/shan/hua/g"  lishan.txt #正则替换字符串
sed -i '1 i\插入字符串' filename #在第一行前插入文本（insert，会使自己成为对应的行）
sed -i '$ a\插入字符串' filename #在最后一行插入（append）
sed -i '/pattern/ i "插入字符串"' filename #在匹配行前插入
sed -i '/pattern/ a "插入字符串"' filename #在匹配行后插入

ntsysv图形化查看开机启动服务（估计要求启动开关都在/etc/init.d/下的才能看到），F12 OK，空格 开关任务。
chkconfig是旧指令，systemctl是新指令。
使某服务自动启动 	chkconfig --level 3 httpd on 	systemctl enable httpd.service
使某服务不自动启动 	chkconfig --level 3 httpd off 	systemctl disable httpd.service
检查服务状态 	service httpd status 	systemctl status httpd.service （服务详细信息） systemctl is-active httpd.service （仅显示是否 Active)
显示所有已启动的服务 	chkconfig --list 	systemctl list-units --type=service
启动某服务 	service httpd start 	systemctl start httpd.service
停止某服务 	service httpd stop 	systemctl stop httpd.service
重启某服务 	service httpd restart 	systemctl restart httpd.service

[root@VM_210_129_centos ~]# chkconfig --list
Note: This output shows SysV services only and does not include native
      systemd services. SysV configuration data might be overridden by native
      systemd configuration.
      If you want to list systemd services use 'systemctl list-unit-files'.
      To see services enabled on particular target use
      'systemctl list-dependencies [target]'.
netconsole     	0:off	1:off	2:off	3:off	4:off	5:off	6:off
network        	0:off	1:off	2:on	3:on	4:on	5:on	6:off
nginx          	0:off	1:off	2:off	3:off	4:off	5:off	6:off
php-fpm        	0:off	1:off	2:on	3:on	4:on	5:on	6:off

modprobe 内核模块加载工具

Ls .* 在git仓库中使用，可以看到有意思的输出
ls -d /etc/rc*这样就不会查看到文件夹里面的内容
ls -lh 查看文件大小
Ls -t 对输出的内容按照修改时间排序 
lsmod 查看启动了的模块
lspci 对硬件的查看
lsof 列出当前系统打开的文件（即句柄，因为所有东西都是文件）
我使用mount命令对将远程计算机的分区挂在到某一个终端正在的目录，然后在那个终端中直接ls没有任何显示，但是退回到父目录以后再进去就能看到有显示了。而且目录下的原来的文件被隐藏。

改日期：
root@kali:~/Desktop# date -s 2017-04-11
Tue Apr 11 00:00:00 EDT 2017
root@kali:~/Desktop# date -s 11:19
Tue Apr 11 11:19:00 EDT 2017
两条命令合在一起不行，估计格式不对。


mkdir -p 这里递归创建不是-r。
rm，cp，chmod对目录的操作都需要-r（rmdir只能用来删除空目录）。mv可以直接对目录使用。
rm -f既然是强制删除的话所以就不会有询问了。

#有比find改良的查找命令
find / -name something
find / -size +10M(当然单位还有G，K)
-type f代表搜索的是文件 d代表搜索的是目录(find ./ -type d包含了当前目录以及当前目录下的所有目录，对比ls -a就能够理解了)
-perm -4 搜索文件的权限码能和4相与为true
-ls 相当于顺便进行ls（针对找到的文件夹）
-daystart 按照创建时间排序

ifconfig usb0 192.168.3.120 up  将usb0接口作为一个网络端口

grep -anv 【指定字符串】 【文件】
-a 文本搜索  grep "<text>" <file>
-n 输出行号
-v 反向搜索
grep data * 就会在当期目录下所有文件中 搜索含有data的行
grep data *.c
如果将data等输入到一个文件中，每个单词一行，然后就可以grep -f 文件名 被搜索的范围执行。
-i 不区分大小写
grep '^123' test
直接使用正则表达式
egrep -i '^123' test

vega@vega-Laptop:~/Desktop$ cat test.txt 
123
123
asfd
asdff
vega@vega-Laptop:~/Desktop$ cat test.txt | uniq #去除重复的部分后显示
123
asfd
asdff
vega@vega-Laptop:~/Desktop$ cat test.txt | uniq -d  #显示重复的部分
123
# uniq -w32是指寻找前32个字符相同的行

tee 指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。
tee -a file 输出到标准输出的同时，追加到文件file中。
tee - 输出到标准输出流两次
tee file1 file2 - 输出搭配标准输出流，并且输出到两个文件

wc 统计
-w 统计字数
-c 统计字节数
-l 统计行数
xxxx | wc "{print $2}" 默认是按照空白字符集进行划也就是说明是按照词进行划分。
ls | wc -l 就能统计文件数目

sort 降序与去重

-n 视为数字
-r 反序输出
-u 去除重复行
-o 输出文件形式
battery@ubuntu:~/Desktop$ sort +0 -1 test 按照文件中以空白字符分隔的第一个字段与第二个字段从小到大的顺序进行排序，结果显示到标准输出
123 123
123 456
123 789
456 789
789 123
但是-1却没有什么用，很奇怪，按照所学应该按第二列倒序
sort -m file1 fiel2 > file_result 将文件file1与文件file2合并（两个文件需要已经sort）
-k 指定比较的列 
-r 反序
-n 视为数字

xargs： 	默认命令效果是无视换行符、以空格为定界符的echo，空格是默认单词边界符（定界符）
xargs与shell中使用通配符的区别？前者是多次执行命令，相当于一个循环；后者是传入多个参数。
转换文本格式： -d 指定定界符 -0指定null即0x00为定界符 -n 指定每一行显示的元素个数
组合多个命令（特别是针对不能够从文件中读取内容的命令）: -i默认替换符{}  -I指定自己的替换符
vega@vega-Laptop:~/Desktop$ echo "nameXnameXnameXname" | xargs -dX -n2
name name
name name
vega@vega-Laptop:cat url-list.txt | xargs wget #将文件中的url分别传送给wget，不过wget本身有一个-i参数。默认省去了{}，因为默认就是加到最后面
vega@vega-Laptop: ls #准备使用-i -I参数
1kk.zip  3kk.zip  5kk.zip  b.rar  d.rar  f.rar  h.rar  j.rar  mini.txt  ni.txt
2kk.zip  4kk.zip  a.rar    c.rar  e.rar  g.rar  i.rar  k.rar  nii.txt
vega@vega-Laptop: find . -type f -name "*.txt" | xargs -i cp {}  /tmp/k/
vega@vega-Laptop: ls /tmp/k/
mini.txt  nii.txt  ni.txt
vega@vega-Laptop: find . -type f -name "*.txt" | xargs -I {} cp {}  /tmp/n/
vega@vega-Laptop: ls /tmp/n/
mini.txt  nii.txt  ni.txt
使用tesseract对一个文件夹中的图片都进行文字识别，很明显不能使用shell中的通配符写法，可以使用find ./ -type f -print0 | xargs -0 -i tesseract {} stdout -l chi_sim
加一个文件复制到各个子目录下：find ./ -type d -print0 | xargs -0 -I{} cp '/home/vega/.deepinwine/Deepin-QQ/dosdevices/c:/users/vega/My Documents/Tencent Files/641370196/FileRecv/text.csv' {}/  需要注意的是文件还会被复制到当前目录下，不想要的话需要进行处理

显卡相关命令：https://wiki.deepin.org/index.php?title=%E6%98%BE%E5%8D%A1

sudo update-alternatives -config java 然后就会给出所有java调用的候选可执行文件。

ImageMagick图形图像处理开源项目:
	convert 转换图像格式和大小，模糊，裁剪，驱除污点，抖动，临近，图片上画图片，加入新图片，生成缩略图等。（Python中的opencv也可以用作图像处理）
	identify 描述一个或较多图像文件的格式和特性。
	composite 根据一个图片或多个图片组合生成图片


查找重复文件并显示文件名：  并不是说一样的文件名而是一样的文件内容
相关命令：
	文件hash命令： sha开头系列 md5sum
	要想使hash命令能够对各个文件（关键是要对子目录中的文件也会生效）使用： find ./ -type f -print0 | xargs -0 md5sum 
	find ./ -type f -print0 | xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate | cut -b 36- 通过md5来寻找出当前目录下的重复文件，最后通过cut命令裁剪36开始到之后的字符。find的-print0选项以及xargs的-0选项，以0x00作为每一个文件名的结束尾，因为文件名中可能出现空格或者换行等空白字符。中间还必须要sort，和uniq神奇选项--all-repeated=separate有关。
	find ./ -not -empty -type f -printf "%s\n" | sort -rn |uniq -d | xargs -I{} -n1 find -type f -size {}c -print0 | xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate | cut -b 36- 配合文件大小先进行一步筛选，而不是直接对所有文件计算md5


串口通信： /dev/ttyxxxxx 相关内容
	fuser /dev/ttyUSB0 可以查看占用设备的进程信息


ipcs 命令用简短格式写入一些关于当前活动消息队列、共享内存段、信号量。
ipcrm 指定id(ipcs看到的id)移出 

sysctl -- get or set kernel state
vega@vega-Laptop:~$ sysctl kern.ipc.shmmax
sysctl: cannot stat /proc/sys/kern/ipc/shmmax: No such file or directory


vega@vega-Laptop:~$ ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 63239	#信号可以被挂起的最大数量
max locked memory       (kbytes, -l) 64		#linux对内存是分页管理的,这意味着有不需要时,在物理内存的数据会被换到交换区或磁盘上.有需要时会被交换到物理内存,而将数据锁定到物理内存可以避免数据的换入/换出。对于需要安全的数据也是尽量避免被交换。
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 63239
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
上面不少限制都只是对普通用户存在限定

查看ssd是否4K对齐：
先用sudo dmesg查看挂载名称：
[68872.938982] sd 3:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[68872.939058] sd 3:0:0:0: [sdb] Write Protect is off
[68872.939060] sd 3:0:0:0: [sdb] Mode Sense: 43 00 00 00
[68872.939219] sd 3:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[68872.941331]  sdb: sdb1
[68872.942435] sd 3:0:0:0: [sdb] Attached SCSI disk
vega@vega-Laptop:/media/vega/Samsung_T5$ fdisk -lu /dev/sdb
fdisk: cannot open /dev/sdb: Permission denied
vega@vega-Laptop:/media/vega/Samsung_T5$ sudo fdisk -lu /dev/sdb
Disk /dev/sdb: 931.5 GiB, 1000204886016 bytes, 1953525168 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 33553920 bytes
Disklabel type: dos
Disk identifier: 0x4589be89
Device     Boot Start        End    Sectors   Size Id Type
/dev/sdb1        2048 1953522112 1953520065 931.5G  7 HPFS/NTFS/exFAT
start开始的扇区能被8整除，就表示4k对齐了

